{
    "title": "AWS Elemental MediaStore",
    "description": "An AWS Elemental MediaStore container is a namespace that holds folders and objects. You use a container endpoint to create, read, and delete objects. ",
    "docsUrl": "https://docs.aws.amazon.com/mediastore/",
    "url": "https://api.apis.guru/v2/specs/amazonaws.com/mediastore/2017-09-01/swagger.json",
    "envVars": {},
    "credentials": {
        "fields": {
            "server": {
                "label": "Server",
                "viewClass": "SelectView",
                "model": [
                    "https://mediastore.amazonaws.com/",
                    "http://mediastore.amazonaws.com/",
                    "--- Custom URL"
                ],
                "required": true
            },
            "otherServer": {
                "label": "Custom Server URL",
                "viewClass": "TextFieldView"
            },
            "auth_hmac": {
                "label": "Authorization (hmac)",
                "viewClass": "TextFieldView",
                "note": "Amazon Signature authorization v4"
            }
        }
    },
    "triggers": {
        "startFlow": {
            "main": "./lib/triggers/startFlow.js",
            "type": "polling",
            "title": "Start Flow",
            "fields": {}
        }
    },
    "actions": {
        "CreateContainer": {
            "main": "./lib/actions/CreateContainer.js",
            "title": "CreateContainer",
            "description": "Creates a storage container to hold objects. A container is similar to a bucket in the Amazon S3 service.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateContainer.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteContainer": {
            "main": "./lib/actions/DeleteContainer.js",
            "title": "DeleteContainer",
            "description": "Deletes the specified container. Before you make a <code>DeleteContainer</code> request, delete any objects in the container or in any folders in the container. You can delete only empty containers. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteContainer.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteContainerPolicy": {
            "main": "./lib/actions/DeleteContainerPolicy.js",
            "title": "DeleteContainerPolicy",
            "description": "Deletes the access policy that is associated with the specified container.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteContainerPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteCorsPolicy": {
            "main": "./lib/actions/DeleteCorsPolicy.js",
            "title": "DeleteCorsPolicy",
            "description": "Deletes the cross-origin resource sharing (CORS) configuration information that\nis set for the container.\n\nTo use this operation, you must have permission to perform the \nMediaStore:DeleteCorsPolicy action. The container owner has this permission by\ndefault and can grant this permission to others.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteCorsPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteLifecyclePolicy": {
            "main": "./lib/actions/DeleteLifecyclePolicy.js",
            "title": "DeleteLifecyclePolicy",
            "description": "Removes an object lifecycle policy from a container. It takes up to 20 minutes for the change to take effect.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteLifecyclePolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeContainer": {
            "main": "./lib/actions/DescribeContainer.js",
            "title": "DescribeContainer",
            "description": "Retrieves the properties of the requested container. This request is commonly used to retrieve the endpoint of a container. An endpoint is a value assigned by the service when a new container is created. A container's endpoint does not change after it has been assigned. The <code>DescribeContainer</code> request returns a single <code>Container</code> object based on <code>ContainerName</code>. To return all <code>Container</code> objects that are associated with a specified AWS account, use <a>ListContainers</a>.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeContainer.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetContainerPolicy": {
            "main": "./lib/actions/GetContainerPolicy.js",
            "title": "GetContainerPolicy",
            "description": "Retrieves the access policy for the specified container. For information about the data that is included in an access policy, see the <a href=\"https://aws.amazon.com/documentation/iam/\">AWS Identity and Access Management User Guide</a>.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetContainerPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetCorsPolicy": {
            "main": "./lib/actions/GetCorsPolicy.js",
            "title": "GetCorsPolicy",
            "description": "Returns the cross-origin resource sharing (CORS) configuration information that\nis set for the container.\n\nTo use this operation, you must have permission to perform the \nMediaStore:GetCorsPolicy action. By default, the container owner has this\npermission and can grant it to others.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetCorsPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetLifecyclePolicy": {
            "main": "./lib/actions/GetLifecyclePolicy.js",
            "title": "GetLifecyclePolicy",
            "description": "Retrieves the object lifecycle policy that is assigned to a container.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetLifecyclePolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListContainers": {
            "main": "./lib/actions/ListContainers.js",
            "title": "ListContainers",
            "description": "Lists the properties of all containers in AWS Elemental MediaStore. \n\nYou can query to receive all the containers in one response. Or you can include\nthe MaxResults parameter to receive a limited number of containers in each\nresponse. In this case, the response includes a token. To get the next set of\ncontainers, send the command again, this time with the NextToken parameter (with\nthe returned token as its value). The next set of responses appears, with a\ntoken if there are still more containers to receive. \n\nSee also DescribeContainer, which gets the properties of one container.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListContainers.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PutContainerPolicy": {
            "main": "./lib/actions/PutContainerPolicy.js",
            "title": "PutContainerPolicy",
            "description": "Creates an access policy for the specified container to restrict the users and\nclients that can access it. For information about the data that is included in\nan access policy, see the AWS Identity and Access Management User Guide\n[https://aws.amazon.com/documentation/iam/].\n\nFor this release of the REST API, you can create only one policy for a\ncontainer. If you enter PutContainerPolicy twice, the second command modifies\nthe existing policy.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PutContainerPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PutCorsPolicy": {
            "main": "./lib/actions/PutCorsPolicy.js",
            "title": "PutCorsPolicy",
            "description": "Sets the cross-origin resource sharing (CORS) configuration on a container so\nthat the container can service cross-origin requests. For example, you might\nwant to enable a request whose origin is http://www.example.com to access your\nAWS Elemental MediaStore container at my.example.container.com by using the\nbrowser's XMLHttpRequest capability.\n\nTo enable CORS on a container, you attach a CORS policy to the container. In the\nCORS policy, you configure rules that identify origins and the HTTP methods that\ncan be executed on your container. The policy can contain up to 398,000\ncharacters. You can add up to 100 rules to a CORS policy. If more than one rule\napplies, the service uses the first applicable rule listed.\n\nTo learn more about CORS, see Cross-Origin Resource Sharing (CORS) in AWS\nElemental MediaStore\n[https://docs.aws.amazon.com/mediastore/latest/ug/cors-policy.html].",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PutCorsPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PutLifecyclePolicy": {
            "main": "./lib/actions/PutLifecyclePolicy.js",
            "title": "PutLifecyclePolicy",
            "description": "Writes an object lifecycle policy to a container. If the container already has\nan object lifecycle policy, the service replaces the existing policy with the\nnew policy. It takes up to 20 minutes for the change to take effect.\n\nFor information about how to construct an object lifecycle policy, see \nComponents of an Object Lifecycle Policy\n[https://docs.aws.amazon.com/mediastore/latest/ug/policies-object-lifecycle-components.html]\n.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PutLifecyclePolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "StartAccessLogging": {
            "main": "./lib/actions/StartAccessLogging.js",
            "title": "StartAccessLogging",
            "description": "Starts access logging on the specified container. When you enable access logging on a container, MediaStore delivers access logs for objects stored in that container to Amazon CloudWatch Logs.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/StartAccessLogging.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "StopAccessLogging": {
            "main": "./lib/actions/StopAccessLogging.js",
            "title": "StopAccessLogging",
            "description": "Stops access logging on the specified container. When you stop access logging on a container, MediaStore stops sending access logs to Amazon CloudWatch Logs. These access logs are not saved and are not retrievable.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/StopAccessLogging.in.json",
                "out": {
                    "type": "object"
                }
            }
        }
    }
}